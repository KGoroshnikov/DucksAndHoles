//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/_Project/MyInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MyInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MyInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MyInput"",
    ""maps"": [
        {
            ""name"": ""MyActions"",
            ""id"": ""801328b5-da83-4720-830b-5ca47509c4ea"",
            ""actions"": [
                {
                    ""name"": ""Tap"",
                    ""type"": ""Button"",
                    ""id"": ""767fbcff-0e0d-44b3-9bd3-59e8db0cfbb8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TapPos"",
                    ""type"": ""Value"",
                    ""id"": ""f5647c0e-b9d1-41f2-9001-fac716f58147"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d18a99a5-2776-4c88-86a3-e0cbe44f2452"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dee55c16-b6e2-4e30-bf5e-e966db251e3b"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""189e67b1-4124-4155-86b2-8470dceb2e82"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87209892-fd05-420f-a1fe-987ec1847b31"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MyActions
        m_MyActions = asset.FindActionMap("MyActions", throwIfNotFound: true);
        m_MyActions_Tap = m_MyActions.FindAction("Tap", throwIfNotFound: true);
        m_MyActions_TapPos = m_MyActions.FindAction("TapPos", throwIfNotFound: true);
    }

    ~@MyInput()
    {
        UnityEngine.Debug.Assert(!m_MyActions.enabled, "This will cause a leak and performance issues, MyInput.MyActions.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MyActions
    private readonly InputActionMap m_MyActions;
    private List<IMyActionsActions> m_MyActionsActionsCallbackInterfaces = new List<IMyActionsActions>();
    private readonly InputAction m_MyActions_Tap;
    private readonly InputAction m_MyActions_TapPos;
    public struct MyActionsActions
    {
        private @MyInput m_Wrapper;
        public MyActionsActions(@MyInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tap => m_Wrapper.m_MyActions_Tap;
        public InputAction @TapPos => m_Wrapper.m_MyActions_TapPos;
        public InputActionMap Get() { return m_Wrapper.m_MyActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MyActionsActions set) { return set.Get(); }
        public void AddCallbacks(IMyActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_MyActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MyActionsActionsCallbackInterfaces.Add(instance);
            @Tap.started += instance.OnTap;
            @Tap.performed += instance.OnTap;
            @Tap.canceled += instance.OnTap;
            @TapPos.started += instance.OnTapPos;
            @TapPos.performed += instance.OnTapPos;
            @TapPos.canceled += instance.OnTapPos;
        }

        private void UnregisterCallbacks(IMyActionsActions instance)
        {
            @Tap.started -= instance.OnTap;
            @Tap.performed -= instance.OnTap;
            @Tap.canceled -= instance.OnTap;
            @TapPos.started -= instance.OnTapPos;
            @TapPos.performed -= instance.OnTapPos;
            @TapPos.canceled -= instance.OnTapPos;
        }

        public void RemoveCallbacks(IMyActionsActions instance)
        {
            if (m_Wrapper.m_MyActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMyActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_MyActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MyActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MyActionsActions @MyActions => new MyActionsActions(this);
    public interface IMyActionsActions
    {
        void OnTap(InputAction.CallbackContext context);
        void OnTapPos(InputAction.CallbackContext context);
    }
}
